console.log('number' + 3 + 3); //number33 - розрах зліва - направо. далі - оскільки відбувається конкантенація спочатку, 
// тому що у виразі є string, буде number3 і далі теж конкантенація - оскільки, вже стало string;

console.log(null + 3); //3 - null - конв до 0, тому що конкантенація не відбувається, оскільки немає string у виразу

console.log(+'40' + +'2' + "hillel"); //42hillel - унарний плюс перед стрингою, яка виражена числом (40 та 2) - перетворює їх в number.
//перша операція - +'40' + +'2' - додавання, оскільки number + number? далі 42 + string = конкантенація, бо є стрінг у виразі
//тому 42hillel - string

console.log('10' - 5 === 6); //false - арифметичніц операціїї приорітетніші за порівняння, тому спочатку '10' - 5, 
// string пеертворюється в number - number = number. ну і 5 не дорівнює 6 - тому false

console.log(true + false); //1 - при арифметичній операціх конвертується true в 1 та false в 0. тому 1+0=1

console.log('4px' - 3); //NaN - оскільки неможлива конвертація даного стрінга через буквенні знаки px. у нас операція віднімання, тому намагається перетворити
//string into number = NaN. NaN - 3 = NaN, оскільки операції з NaN дають нам NaN.

console.log('4' - 3); //1 - конвертація string в number, оскільке даний string може бути конвертований в валідний. далі йде операція віднімання (конкантенація тільки з "+")

console.log('6' + 3 ** 0); //61 - розрахунок відбувається справа наліво, тому що "**" - приорітетніша. 3**0 = 1. 
// далі йде конкантенація - бо вона приорітетніша за конвертацію.

console.log(12 / '6'); //2 - num / string. оскільки js завжди намагається конвертувати в чисто, та цей string може бути конвертований у валідне чисто, 
// тому йде операція ділення

console.log('10' + (5 === 6)); //операція в дужках має приорітет. результат - false. => '10' + false = буде мати операцію конкантенацію, 
// бо вона приорітетніша за конвертацію



console.log(null == ''); //false - це різні типи даних - null та пустий string. вони не дорівнюют одне одному



console.log(3 ** (9 / 3)); //27 - спочатку операція в дужках: 9/3=3. потім 3 в ступені 3.

console.log(!!'false' == !!'true'); //true - тому що ! конвертує в булевий тип та інвертує його, а подвійний повертає до початкового.
//тому у нас true == true, оскільки не пустий string перетворюється в true


console.log(0 || '0' && 1); //1 - тому що 0=false, а '0'=true. при OR - повертає перше true, тобто поверне '0'.
//далі у нас true та 1=true теж. AND операція повертає останнє true якщо обидва true, тому маємо 1

console.log((+null == false) < 1); //false - перша операція в дужках, де null з унарним плюс дає нам 0. 
// 0, в свою чергу конвертується в false. а false дорівнює false - результат true. далі true конвертується в 1. а 1 не менше 1.


console.log(false && true || true); //true - перша операція false && true - це операція AND - поверне перше false. 
// далі false || true: операція OR - поверне перше true


console.log(false && (false || true)); //false - перша операція в дужках OR - поверне перше true, тобто отримаємо true,
//далі буде вираз false && true = у нас операція AND - обидва значення ма.ть бути true, тому повертає перше false.


console.log((+null == false) < 1 ** 5); //false - перша операція в дужках: +null == false, де null з унарним плюс дає нам 0. 
//0, в свою чергу конвертується в false, а false дорівнює false, тобто отримуємо true.
//далі арифметична операція має приорітет над порівнянням: 1 ** 5=1.
//далі порівнюється true < 1, де true конвертується в 1. а 1 не менше 1, тому false



